[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "websocket-notification-server"
version = "0.1.0"
description = "Production-ready WebSocket notification server built with FastAPI"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "WebSocket Server Team" },
]
keywords = ["websocket", "fastapi", "notifications", "real-time"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.119.1",
    "uvicorn[standard]>=0.38.0",
    "websockets>=13.1",
    "pydantic>=2.12.3",
    "pydantic-settings>=2.8.0",
    "loguru>=0.7.3",
    "python-dotenv>=1.0.1",
    "prometheus-client>=0.21.1",
    "uvloop>=0.21.0; sys_platform != 'win32'",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "websocket-client>=1.8.0",
    "black>=24.10.0",
    "ruff>=0.14.1",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
]

[project.urls]
Homepage = "https://github.com/example/websocket-notification-server"
Repository = "https://github.com/example/websocket-notification-server.git"
Issues = "https://github.com/example/websocket-notification-server/issues"

[project.scripts]
websocket-server = "websocket_server.main:main"

[tool.hatch.build.targets.wheel]
packages = ["websocket_server"]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "E402",  # module level import not at top of file (needed for path setup)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"main.py" = ["E402"]  # Allow imports after path setup
"tests/**" = ["B007"]  # Allow unused loop variables in tests

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["websocket_server"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]