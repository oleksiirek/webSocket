version: '3.8'

services:
  websocket-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: websocket-notification-server
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=2
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - DEBUG=false
      - MAX_CONNECTIONS=1000
      - NOTIFICATION_INTERVAL=10
      - SHUTDOWN_TIMEOUT=1800
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - websocket-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: websocket-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - websocket-server
    restart: unless-stopped
    networks:
      - websocket-network
    profiles:
      - production

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: websocket-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - websocket-network
    profiles:
      - monitoring

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: websocket-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - websocket-network
    profiles:
      - monitoring

networks:
  websocket-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: